{"ast":null,"code":"import { listagem, comentario, like, notifica } from '../actions/actionCreator';\nexport default class TimelineApi {\n  static lista(urlPerfil) {\n    return dispatch => {\n      fetch(urlPerfil).then(response => response.json()).then(fotos => {\n        dispatch(listagem(fotos));\n        return fotos;\n      });\n    };\n  }\n\n  static comenta(fotoId, textoComentario) {\n    return dispatch => {\n      const requestInfo = {\n        method: 'POST',\n        body: JSON.stringify({\n          texto: textoComentario\n        }),\n        headers: new Headers({\n          'Content-type': 'application/json'\n        })\n      };\n      fetch(`https://instalura-api.herokuapp.com/api/fotos/${fotoId}/comment?X-AUTH-TOKEN=${localStorage.getItem('auth-token')}`, requestInfo).then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error(\"não foi possível comentar\");\n        }\n      }).then(novoComentario => {\n        dispatch(comentario(fotoId, novoComentario));\n        return novoComentario;\n      });\n    };\n  }\n\n  static like(fotoId) {\n    return dispatch => {\n      fetch(`https://instalura-api.herokuapp.com/api/fotos/${fotoId}/like?X-AUTH-TOKEN=${localStorage.getItem('auth-token')}`, {\n        method: 'POST'\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error(\"não foi possível realizar o like da foto\");\n        }\n      }).then(liker => {\n        dispatch(like(fotoId, liker));\n        return liker;\n      });\n    };\n  }\n\n  static pesquisa(login) {\n    return dispatch => {\n      fetch(`https://instalura-api.herokuapp.com/api/public/fotos/${login}`).then(response => response.json()).then(fotos => {\n        if (fotos.length === 0) {\n          dispatch(notifica('usuario não encontrado'));\n        } else {\n          dispatch(notifica('usuario encontrado'));\n        }\n\n        dispatch(listagem(fotos));\n        return fotos;\n      });\n    };\n  }\n\n}","map":{"version":3,"sources":["/home/joaohgs/Documents/ProjetosReact/instalura/src/logicas/TimelineApi.js"],"names":["listagem","comentario","like","notifica","TimelineApi","lista","urlPerfil","dispatch","fetch","then","response","json","fotos","comenta","fotoId","textoComentario","requestInfo","method","body","JSON","stringify","texto","headers","Headers","localStorage","getItem","ok","Error","novoComentario","liker","pesquisa","login","length"],"mappings":"AAAA,SAAQA,QAAR,EAAiBC,UAAjB,EAA4BC,IAA5B,EAAiCC,QAAjC,QAAgD,0BAAhD;AAEA,eAAe,MAAMC,WAAN,CAAkB;AACjB,SAALC,KAAK,CAACC,SAAD,EAAW;AACrB,WAAOC,QAAQ,IAAI;AACjBC,MAAAA,KAAK,CAACF,SAAD,CAAL,CACCG,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,KAAK,IAAI;AACXL,QAAAA,QAAQ,CAACP,QAAQ,CAACY,KAAD,CAAT,CAAR;AACA,eAAOA,KAAP;AACH,OALD;AAMD,KAPD;AAQD;;AAEa,SAAPC,OAAO,CAACC,MAAD,EAAQC,eAAR,EAAyB;AACrC,WAAOR,QAAQ,IAAI;AACjB,YAAMS,WAAW,GAAG;AAClBC,QAAAA,MAAM,EAAC,MADW;AAElBC,QAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAe;AAACC,UAAAA,KAAK,EAACN;AAAP,SAAf,CAFa;AAGlBO,QAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AACnB,0BAAe;AADI,SAAZ;AAHS,OAApB;AAQAf,MAAAA,KAAK,CAAE,iDAAgDM,MAAO,yBAAwBU,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAmC,EAApH,EAAsHT,WAAtH,CAAL,CACGP,IADH,CACQC,QAAQ,IAAI;AAChB,YAAGA,QAAQ,CAACgB,EAAZ,EAAe;AACb,iBAAOhB,QAAQ,CAACC,IAAT,EAAP;AACD,SAFD,MAEO;AACL,gBAAM,IAAIgB,KAAJ,CAAU,2BAAV,CAAN;AACD;AACF,OAPH,EAQGlB,IARH,CAQQmB,cAAc,IAAI;AACpBrB,QAAAA,QAAQ,CAACN,UAAU,CAACa,MAAD,EAAQc,cAAR,CAAX,CAAR;AACA,eAAOA,cAAP;AACH,OAXH;AAYD,KArBD;AAsBD;;AAEU,SAAJ1B,IAAI,CAACY,MAAD,EAAQ;AACjB,WAAOP,QAAQ,IAAI;AACjBC,MAAAA,KAAK,CAAE,iDAAgDM,MAAO,sBAAqBU,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAmC,EAAjH,EAAmH;AAACR,QAAAA,MAAM,EAAC;AAAR,OAAnH,CAAL,CACGR,IADH,CACQC,QAAQ,IAAI;AAChB,YAAGA,QAAQ,CAACgB,EAAZ,EAAgB;AACd,iBAAOhB,QAAQ,CAACC,IAAT,EAAP;AACD,SAFD,MAEO;AACL,gBAAM,IAAIgB,KAAJ,CAAU,0CAAV,CAAN;AACD;AACF,OAPH,EAQGlB,IARH,CAQQoB,KAAK,IAAI;AACbtB,QAAAA,QAAQ,CAACL,IAAI,CAACY,MAAD,EAAQe,KAAR,CAAL,CAAR;AACA,eAAOA,KAAP;AACD,OAXH;AAYD,KAbD;AAcD;;AAEc,SAARC,QAAQ,CAACC,KAAD,EAAO;AACpB,WAAOxB,QAAQ,IAAI;AACjBC,MAAAA,KAAK,CAAE,wDAAuDuB,KAAM,EAA/D,CAAL,CACGtB,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQG,KAAK,IAAI;AACb,YAAGA,KAAK,CAACoB,MAAN,KAAiB,CAApB,EAAsB;AACpBzB,UAAAA,QAAQ,CAACJ,QAAQ,CAAC,wBAAD,CAAT,CAAR;AACD,SAFD,MAEO;AACLI,UAAAA,QAAQ,CAACJ,QAAQ,CAAC,oBAAD,CAAT,CAAR;AACD;;AAEDI,QAAAA,QAAQ,CAACP,QAAQ,CAACY,KAAD,CAAT,CAAR;AACA,eAAOA,KAAP;AACD,OAXH;AAYD,KAbD;AAcD;;AArE4B","sourcesContent":["import {listagem,comentario,like,notifica} from '../actions/actionCreator';\n\nexport default class TimelineApi {\n    static lista(urlPerfil){\n      return dispatch => {\n        fetch(urlPerfil)\n        .then(response => response.json())\n        .then(fotos => {         \n            dispatch(listagem(fotos));\n            return fotos;\n        });\n      }              \n    }\n\n    static comenta(fotoId,textoComentario) {\n      return dispatch => {\n        const requestInfo = {\n          method:'POST',\n          body:JSON.stringify({texto:textoComentario}),\n          headers: new Headers({\n            'Content-type':'application/json'\n          })\n        };\n\n        fetch(`https://instalura-api.herokuapp.com/api/fotos/${fotoId}/comment?X-AUTH-TOKEN=${localStorage.getItem('auth-token')}`,requestInfo)\n          .then(response => {\n            if(response.ok){\n              return response.json();\n            } else {\n              throw new Error(\"não foi possível comentar\");\n            }\n          })\n          .then(novoComentario => {\n              dispatch(comentario(fotoId,novoComentario));            \n              return novoComentario;\n          }); \n      }     \n    }    \n\n    static like(fotoId){\n      return dispatch => {\n        fetch(`https://instalura-api.herokuapp.com/api/fotos/${fotoId}/like?X-AUTH-TOKEN=${localStorage.getItem('auth-token')}`,{method:'POST'})\n          .then(response => {\n            if(response.ok) {\n              return response.json();\n            } else {            \n              throw new Error(\"não foi possível realizar o like da foto\");\n            }\n          })\n          .then(liker => {          \n            dispatch(like(fotoId,liker));   \n            return liker;         \n          });             \n      } \n    }\n\n    static pesquisa(login){\n      return dispatch => {\n        fetch(`https://instalura-api.herokuapp.com/api/public/fotos/${login}`)\n          .then(response => response.json())\n          .then(fotos => {\n            if(fotos.length === 0){\n              dispatch(notifica('usuario não encontrado'));\n            } else {\n              dispatch(notifica('usuario encontrado'));\n            }\n\n            dispatch(listagem(fotos));\n            return fotos;\n          });      \n      }\n    }\n\n}"]},"metadata":{},"sourceType":"module"}