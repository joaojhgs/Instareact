{"ast":null,"code":"import { List } from 'immutable';\n\nfunction trocaFoto(lista, fotoId, callbackAtualizaPropriedades) {\n  const fotoEstadoAntigo = lista.find(foto => foto.id === fotoId);\n  const novasPropriedades = callbackAtualizaPropriedades(fotoEstadoAntigo);\n  const fotoEstadoNovo = Object.assign({}, fotoEstadoAntigo, novasPropriedades);\n  const indiceDaLista = lista.findIndex(foto => foto.id === fotoId);\n  return lista.set(indiceDaLista, fotoEstadoNovo);\n}\n\nexport function timeline() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new List();\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === 'LISTAGEM') {\n    return new List(action.fotos);\n  }\n\n  if (action.type === 'COMENTARIO') {\n    return trocaFoto(state, action.fotoId, fotoEstadoAntigo => {\n      const novosComentarios = fotoEstadoAntigo.comentarios.concat(action.novoComentario);\n      return {\n        comentarios: novosComentarios\n      };\n    });\n  }\n\n  if (action.type === 'LIKE') {\n    return trocaFoto(state, action.fotoId, fotoEstadoAntigo => {\n      const likeada = !fotoEstadoAntigo.likeada;\n      const liker = action.liker;\n      const possivelLiker = fotoEstadoAntigo.likers.find(likerAtual => likerAtual.login === liker.login);\n      let novosLikers;\n\n      if (possivelLiker === undefined) {\n        novosLikers = fotoEstadoAntigo.likers.concat(liker);\n      } else {\n        novosLikers = fotoEstadoAntigo.likers.filter(likerAtual => likerAtual.login !== liker.login);\n      }\n\n      return {\n        likeada,\n        likers: novosLikers\n      };\n    });\n  }\n\n  return state;\n}","map":{"version":3,"sources":["/home/joaohgs/Documents/ProjetosReact/instalura/src/reducers/timeline.js"],"names":["List","trocaFoto","lista","fotoId","callbackAtualizaPropriedades","fotoEstadoAntigo","find","foto","id","novasPropriedades","fotoEstadoNovo","Object","assign","indiceDaLista","findIndex","set","timeline","state","action","type","fotos","novosComentarios","comentarios","concat","novoComentario","likeada","liker","possivelLiker","likers","likerAtual","login","novosLikers","undefined","filter"],"mappings":"AAAA,SAAQA,IAAR,QAAmB,WAAnB;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAAyBC,MAAzB,EAAgCC,4BAAhC,EAA6D;AAEzD,QAAMC,gBAAgB,GAAGH,KAAK,CAACI,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYL,MAA/B,CAAzB;AACA,QAAMM,iBAAiB,GAAGL,4BAA4B,CAACC,gBAAD,CAAtD;AAEA,QAAMK,cAAc,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAiBP,gBAAjB,EAAkCI,iBAAlC,CAAvB;AACA,QAAMI,aAAa,GAAGX,KAAK,CAACY,SAAN,CAAgBP,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYL,MAApC,CAAtB;AAEA,SAAOD,KAAK,CAACa,GAAN,CAAUF,aAAV,EAAwBH,cAAxB,CAAP;AACH;;AAED,OAAO,SAASM,QAAT,GAA0C;AAAA,MAAxBC,KAAwB,uEAAlB,IAAIjB,IAAJ,EAAkB;AAAA,MAAPkB,MAAO;;AAC/C,MAAGA,MAAM,CAACC,IAAP,KAAgB,UAAnB,EAA8B;AAC5B,WAAO,IAAInB,IAAJ,CAASkB,MAAM,CAACE,KAAhB,CAAP;AACD;;AAED,MAAGF,MAAM,CAACC,IAAP,KAAgB,YAAnB,EAAgC;AAC5B,WAAOlB,SAAS,CAACgB,KAAD,EAAOC,MAAM,CAACf,MAAd,EAAqBE,gBAAgB,IAAI;AACvD,YAAMgB,gBAAgB,GAAGhB,gBAAgB,CAACiB,WAAjB,CAA6BC,MAA7B,CAAoCL,MAAM,CAACM,cAA3C,CAAzB;AACA,aAAO;AAACF,QAAAA,WAAW,EAACD;AAAb,OAAP;AACD,KAHe,CAAhB;AAIH;;AAED,MAAGH,MAAM,CAACC,IAAP,KAAgB,MAAnB,EAA0B;AAEtB,WAAOlB,SAAS,CAACgB,KAAD,EAAOC,MAAM,CAACf,MAAd,EAAqBE,gBAAgB,IAAI;AACvD,YAAMoB,OAAO,GAAG,CAACpB,gBAAgB,CAACoB,OAAlC;AAEA,YAAMC,KAAK,GAAGR,MAAM,CAACQ,KAArB;AACA,YAAMC,aAAa,GAAGtB,gBAAgB,CAACuB,MAAjB,CAAwBtB,IAAxB,CAA6BuB,UAAU,IAAIA,UAAU,CAACC,KAAX,KAAqBJ,KAAK,CAACI,KAAtE,CAAtB;AAEA,UAAIC,WAAJ;;AACA,UAAGJ,aAAa,KAAKK,SAArB,EAA+B;AAC3BD,QAAAA,WAAW,GAAG1B,gBAAgB,CAACuB,MAAjB,CAAwBL,MAAxB,CAA+BG,KAA/B,CAAd;AACH,OAFD,MAEO;AACHK,QAAAA,WAAW,GAAG1B,gBAAgB,CAACuB,MAAjB,CAAwBK,MAAxB,CAA+BJ,UAAU,IAAIA,UAAU,CAACC,KAAX,KAAqBJ,KAAK,CAACI,KAAxE,CAAd;AACH;;AAED,aAAO;AAACL,QAAAA,OAAD;AAASG,QAAAA,MAAM,EAACG;AAAhB,OAAP;AACD,KAde,CAAhB;AAeH;;AAED,SAAOd,KAAP;AACD","sourcesContent":["import {List} from 'immutable';\n\nfunction trocaFoto(lista,fotoId,callbackAtualizaPropriedades){\n\n    const fotoEstadoAntigo = lista.find(foto => foto.id === fotoId);        \n    const novasPropriedades = callbackAtualizaPropriedades(fotoEstadoAntigo);\n\n    const fotoEstadoNovo = Object.assign({},fotoEstadoAntigo,novasPropriedades);\n    const indiceDaLista = lista.findIndex(foto => foto.id === fotoId);\n\n    return lista.set(indiceDaLista,fotoEstadoNovo);    \n}\n\nexport function timeline(state=new List(),action){\n  if(action.type === 'LISTAGEM'){  \n    return new List(action.fotos);\n  }\n\n  if(action.type === 'COMENTARIO'){            \n      return trocaFoto(state,action.fotoId,fotoEstadoAntigo => {\n        const novosComentarios = fotoEstadoAntigo.comentarios.concat(action.novoComentario); \n        return {comentarios:novosComentarios};\n      });\n  }\n\n  if(action.type === 'LIKE'){\n\n      return trocaFoto(state,action.fotoId,fotoEstadoAntigo => {\n        const likeada = !fotoEstadoAntigo.likeada;\n\n        const liker = action.liker;\n        const possivelLiker = fotoEstadoAntigo.likers.find(likerAtual => likerAtual.login === liker.login);\n\n        let novosLikers;\n        if(possivelLiker === undefined){\n            novosLikers = fotoEstadoAntigo.likers.concat(liker);\n        } else {\n            novosLikers = fotoEstadoAntigo.likers.filter(likerAtual => likerAtual.login !== liker.login);            \n        }\n\n        return {likeada,likers:novosLikers};\n      });\n  }\n\n  return state;\n}"]},"metadata":{},"sourceType":"module"}