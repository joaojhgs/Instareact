{"ast":null,"code":"/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */\nexport default function compose() {\n  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  if (funcs.length === 0) {\n    return function (arg) {\n      return arg;\n    };\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0];\n  }\n\n  var last = funcs[funcs.length - 1];\n  var rest = funcs.slice(0, -1);\n  return function () {\n    return rest.reduceRight(function (composed, f) {\n      return f(composed);\n    }, last.apply(undefined, arguments));\n  };\n}","map":{"version":3,"sources":["/home/joaohgs/Documents/ProjetosReact/instalura/node_modules/redux/es/compose.js"],"names":["compose","_len","arguments","length","funcs","Array","_key","arg","last","rest","slice","reduceRight","composed","f","apply","undefined"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,eAAe,SAASA,OAAT,GAAmB;AAChC,OAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,KAAK,GAAGC,KAAK,CAACJ,IAAD,CAA1C,EAAkDK,IAAI,GAAG,CAA9D,EAAiEA,IAAI,GAAGL,IAAxE,EAA8EK,IAAI,EAAlF,EAAsF;AACpFF,IAAAA,KAAK,CAACE,IAAD,CAAL,GAAcJ,SAAS,CAACI,IAAD,CAAvB;AACD;;AAED,MAAIF,KAAK,CAACD,MAAN,KAAiB,CAArB,EAAwB;AACtB,WAAO,UAAUI,GAAV,EAAe;AACpB,aAAOA,GAAP;AACD,KAFD;AAGD;;AAED,MAAIH,KAAK,CAACD,MAAN,KAAiB,CAArB,EAAwB;AACtB,WAAOC,KAAK,CAAC,CAAD,CAAZ;AACD;;AAED,MAAII,IAAI,GAAGJ,KAAK,CAACA,KAAK,CAACD,MAAN,GAAe,CAAhB,CAAhB;AACA,MAAIM,IAAI,GAAGL,KAAK,CAACM,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAX;AACA,SAAO,YAAY;AACjB,WAAOD,IAAI,CAACE,WAAL,CAAiB,UAAUC,QAAV,EAAoBC,CAApB,EAAuB;AAC7C,aAAOA,CAAC,CAACD,QAAD,CAAR;AACD,KAFM,EAEJJ,IAAI,CAACM,KAAL,CAAWC,SAAX,EAAsBb,SAAtB,CAFI,CAAP;AAGD,GAJD;AAKD","sourcesContent":["/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */\n\nexport default function compose() {\n  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  if (funcs.length === 0) {\n    return function (arg) {\n      return arg;\n    };\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0];\n  }\n\n  var last = funcs[funcs.length - 1];\n  var rest = funcs.slice(0, -1);\n  return function () {\n    return rest.reduceRight(function (composed, f) {\n      return f(composed);\n    }, last.apply(undefined, arguments));\n  };\n}"]},"metadata":{},"sourceType":"module"}