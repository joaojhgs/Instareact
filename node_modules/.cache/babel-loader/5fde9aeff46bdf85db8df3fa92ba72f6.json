{"ast":null,"code":"import { ActionTypes } from './createStore';\nimport isPlainObject from 'lodash-es/isPlainObject';\nimport warning from './utils/warning';\n\nfunction getUndefinedStateErrorMessage(key, action) {\n  var actionType = action && action.type;\n  var actionName = actionType && '\"' + actionType.toString() + '\"' || 'an action';\n  return 'Given action ' + actionName + ', reducer \"' + key + '\" returned undefined. ' + 'To ignore an action, you must explicitly return the previous state.';\n}\n\nfunction getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {\n  var reducerKeys = Object.keys(reducers);\n  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';\n\n  if (reducerKeys.length === 0) {\n    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';\n  }\n\n  if (!isPlainObject(inputState)) {\n    return 'The ' + argumentName + ' has unexpected type of \"' + {}.toString.call(inputState).match(/\\s([a-z|A-Z]+)/)[1] + '\". Expected argument to be an object with the following ' + ('keys: \"' + reducerKeys.join('\", \"') + '\"');\n  }\n\n  var unexpectedKeys = Object.keys(inputState).filter(function (key) {\n    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];\n  });\n  unexpectedKeys.forEach(function (key) {\n    unexpectedKeyCache[key] = true;\n  });\n\n  if (unexpectedKeys.length > 0) {\n    return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('\"' + unexpectedKeys.join('\", \"') + '\" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('\"' + reducerKeys.join('\", \"') + '\". Unexpected keys will be ignored.');\n  }\n}\n\nfunction assertReducerSanity(reducers) {\n  Object.keys(reducers).forEach(function (key) {\n    var reducer = reducers[key];\n    var initialState = reducer(undefined, {\n      type: ActionTypes.INIT\n    });\n\n    if (typeof initialState === 'undefined') {\n      throw new Error('Reducer \"' + key + '\" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined.');\n    }\n\n    var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');\n\n    if (typeof reducer(undefined, {\n      type: type\n    }) === 'undefined') {\n      throw new Error('Reducer \"' + key + '\" returned undefined when probed with a random type. ' + ('Don\\'t try to handle ' + ActionTypes.INIT + ' or other actions in \"redux/*\" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined.');\n    }\n  });\n}\n/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @param {Object} reducers An object whose values correspond to different\n * reducer functions that need to be combined into one. One handy way to obtain\n * it is to use ES6 `import * as reducers` syntax. The reducers may never return\n * undefined for any action. Instead, they should return their initial state\n * if the state passed to them was undefined, and the current state for any\n * unrecognized action.\n *\n * @returns {Function} A reducer function that invokes every reducer inside the\n * passed object, and builds a state object with the same shape.\n */\n\n\nexport default function combineReducers(reducers) {\n  var reducerKeys = Object.keys(reducers);\n  var finalReducers = {};\n\n  for (var i = 0; i < reducerKeys.length; i++) {\n    var key = reducerKeys[i];\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof reducers[key] === 'undefined') {\n        warning('No reducer provided for key \"' + key + '\"');\n      }\n    }\n\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n\n  var finalReducerKeys = Object.keys(finalReducers);\n\n  if (process.env.NODE_ENV !== 'production') {\n    var unexpectedKeyCache = {};\n  }\n\n  var sanityError;\n\n  try {\n    assertReducerSanity(finalReducers);\n  } catch (e) {\n    sanityError = e;\n  }\n\n  return function combination() {\n    var state = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n    var action = arguments[1];\n\n    if (sanityError) {\n      throw sanityError;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);\n\n      if (warningMessage) {\n        warning(warningMessage);\n      }\n    }\n\n    var hasChanged = false;\n    var nextState = {};\n\n    for (var i = 0; i < finalReducerKeys.length; i++) {\n      var key = finalReducerKeys[i];\n      var reducer = finalReducers[key];\n      var previousStateForKey = state[key];\n      var nextStateForKey = reducer(previousStateForKey, action);\n\n      if (typeof nextStateForKey === 'undefined') {\n        var errorMessage = getUndefinedStateErrorMessage(key, action);\n        throw new Error(errorMessage);\n      }\n\n      nextState[key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n\n    return hasChanged ? nextState : state;\n  };\n}","map":{"version":3,"sources":["/home/joaohgs/Documents/ProjetosReact/instalura/node_modules/redux/es/combineReducers.js"],"names":["ActionTypes","isPlainObject","warning","getUndefinedStateErrorMessage","key","action","actionType","type","actionName","toString","getUnexpectedStateShapeWarningMessage","inputState","reducers","unexpectedKeyCache","reducerKeys","Object","keys","argumentName","INIT","length","call","match","join","unexpectedKeys","filter","hasOwnProperty","forEach","assertReducerSanity","reducer","initialState","undefined","Error","Math","random","substring","split","combineReducers","finalReducers","i","process","env","NODE_ENV","finalReducerKeys","sanityError","e","combination","state","arguments","warningMessage","hasChanged","nextState","previousStateForKey","nextStateForKey","errorMessage"],"mappings":"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","sourcesContent":["import { ActionTypes } from './createStore';\nimport isPlainObject from 'lodash-es/isPlainObject';\nimport warning from './utils/warning';\n\nfunction getUndefinedStateErrorMessage(key, action) {\n  var actionType = action && action.type;\n  var actionName = actionType && '\"' + actionType.toString() + '\"' || 'an action';\n\n  return 'Given action ' + actionName + ', reducer \"' + key + '\" returned undefined. ' + 'To ignore an action, you must explicitly return the previous state.';\n}\n\nfunction getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {\n  var reducerKeys = Object.keys(reducers);\n  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';\n\n  if (reducerKeys.length === 0) {\n    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';\n  }\n\n  if (!isPlainObject(inputState)) {\n    return 'The ' + argumentName + ' has unexpected type of \"' + {}.toString.call(inputState).match(/\\s([a-z|A-Z]+)/)[1] + '\". Expected argument to be an object with the following ' + ('keys: \"' + reducerKeys.join('\", \"') + '\"');\n  }\n\n  var unexpectedKeys = Object.keys(inputState).filter(function (key) {\n    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];\n  });\n\n  unexpectedKeys.forEach(function (key) {\n    unexpectedKeyCache[key] = true;\n  });\n\n  if (unexpectedKeys.length > 0) {\n    return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('\"' + unexpectedKeys.join('\", \"') + '\" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('\"' + reducerKeys.join('\", \"') + '\". Unexpected keys will be ignored.');\n  }\n}\n\nfunction assertReducerSanity(reducers) {\n  Object.keys(reducers).forEach(function (key) {\n    var reducer = reducers[key];\n    var initialState = reducer(undefined, { type: ActionTypes.INIT });\n\n    if (typeof initialState === 'undefined') {\n      throw new Error('Reducer \"' + key + '\" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined.');\n    }\n\n    var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');\n    if (typeof reducer(undefined, { type: type }) === 'undefined') {\n      throw new Error('Reducer \"' + key + '\" returned undefined when probed with a random type. ' + ('Don\\'t try to handle ' + ActionTypes.INIT + ' or other actions in \"redux/*\" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined.');\n    }\n  });\n}\n\n/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @param {Object} reducers An object whose values correspond to different\n * reducer functions that need to be combined into one. One handy way to obtain\n * it is to use ES6 `import * as reducers` syntax. The reducers may never return\n * undefined for any action. Instead, they should return their initial state\n * if the state passed to them was undefined, and the current state for any\n * unrecognized action.\n *\n * @returns {Function} A reducer function that invokes every reducer inside the\n * passed object, and builds a state object with the same shape.\n */\nexport default function combineReducers(reducers) {\n  var reducerKeys = Object.keys(reducers);\n  var finalReducers = {};\n  for (var i = 0; i < reducerKeys.length; i++) {\n    var key = reducerKeys[i];\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof reducers[key] === 'undefined') {\n        warning('No reducer provided for key \"' + key + '\"');\n      }\n    }\n\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n  var finalReducerKeys = Object.keys(finalReducers);\n\n  if (process.env.NODE_ENV !== 'production') {\n    var unexpectedKeyCache = {};\n  }\n\n  var sanityError;\n  try {\n    assertReducerSanity(finalReducers);\n  } catch (e) {\n    sanityError = e;\n  }\n\n  return function combination() {\n    var state = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n    var action = arguments[1];\n\n    if (sanityError) {\n      throw sanityError;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);\n      if (warningMessage) {\n        warning(warningMessage);\n      }\n    }\n\n    var hasChanged = false;\n    var nextState = {};\n    for (var i = 0; i < finalReducerKeys.length; i++) {\n      var key = finalReducerKeys[i];\n      var reducer = finalReducers[key];\n      var previousStateForKey = state[key];\n      var nextStateForKey = reducer(previousStateForKey, action);\n      if (typeof nextStateForKey === 'undefined') {\n        var errorMessage = getUndefinedStateErrorMessage(key, action);\n        throw new Error(errorMessage);\n      }\n      nextState[key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n    return hasChanged ? nextState : state;\n  };\n}"]},"metadata":{},"sourceType":"module"}