{"ast":null,"code":"import { List } from 'immutable';\nexport function timeline() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new List();\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  function trocaFoto(lista, fotoId, callbackAtualizaPropriedades) {\n    const fotoEstadoAntigo = lista.find(foto => foto.id === fotoId);\n    const novasPropriedades = callbackAtualizaPropriedades(fotoEstadoAntigo);\n    const fotoEstadoNovo = Object.assign({}, fotoEstadoAntigo, novasPropriedades);\n    const indiceDaLista = lista.findIndex(foto => foto.id === action.fotoId);\n    return lista.set(indiceDaLista, fotoEstadoNovo);\n  }\n\n  if (action.type === 'LISTAGEM') {\n    return new List(action.fotos);\n  }\n\n  if (action.type === 'COMENTARIO') {\n    return trocaFoto(state, action.fotoId, fotoEstadoAntigo => {\n      const novosComentarios = fotoEstadoAntigo.comentarios.concat(action.novoComentario);\n      return {\n        comentarios: novosComentarios\n      };\n    });\n  }\n\n  if (action.type === 'LIKE') {\n    return trocaFoto(state.action.fotoId, fotoEstadoAntigo => {\n      const likeada = !fotoEstadoAntigo.likeada;\n      const liker = action.liker;\n      const possivelLiker = fotoEstadoAntigo.likers.find(likerAtual => likerAtual.login === liker.login);\n      let novosLikers;\n\n      if (possivelLiker === undefined) {\n        novosLikers = fotoEstadoAntigo.likers.concat(liker);\n      } else {\n        novosLikers = fotoEstadoAntigo.likers.filter(likerAtual => likerAtual.login !== liker.login);\n      }\n\n      return {\n        likeada,\n        likers: novosLikers\n      };\n    });\n  }\n\n  return state;\n}","map":{"version":3,"sources":["/home/joaohgs/Documents/ProjetosReact/instalura/src/reducers/timeline.js"],"names":["List","timeline","state","action","trocaFoto","lista","fotoId","callbackAtualizaPropriedades","fotoEstadoAntigo","find","foto","id","novasPropriedades","fotoEstadoNovo","Object","assign","indiceDaLista","findIndex","set","type","fotos","novosComentarios","comentarios","concat","novoComentario","likeada","liker","possivelLiker","likers","likerAtual","login","novosLikers","undefined","filter"],"mappings":"AAAA,SAAQA,IAAR,QAAmB,WAAnB;AAIA,OAAO,SAASC,QAAT,GAA0C;AAAA,MAAxBC,KAAwB,uEAAlB,IAAIF,IAAJ,EAAkB;AAAA,MAAPG,MAAO;;AAE7C,WAASC,SAAT,CAAmBC,KAAnB,EAAyBC,MAAzB,EAAgCC,4BAAhC,EAA6D;AAEzD,UAAMC,gBAAgB,GAAGH,KAAK,CAACI,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYL,MAA/B,CAAzB;AACA,UAAMM,iBAAiB,GAAGL,4BAA4B,CAACC,gBAAD,CAAtD;AACA,UAAMK,cAAc,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAiBP,gBAAjB,EAAkCI,iBAAlC,CAAvB;AACA,UAAMI,aAAa,GAAGX,KAAK,CAACY,SAAN,CAAgBP,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYR,MAAM,CAACG,MAA3C,CAAtB;AACA,WAAOD,KAAK,CAACa,GAAN,CAAUF,aAAV,EAAwBH,cAAxB,CAAP;AACH;;AAED,MAAGV,MAAM,CAACgB,IAAP,KAAgB,UAAnB,EAA8B;AAC5B,WAAO,IAAInB,IAAJ,CAASG,MAAM,CAACiB,KAAhB,CAAP;AACD;;AAED,MAAGjB,MAAM,CAACgB,IAAP,KAAgB,YAAnB,EAAgC;AAC5B,WAAOf,SAAS,CAACF,KAAD,EAAQC,MAAM,CAACG,MAAf,EAAsBE,gBAAgB,IAAI;AACtD,YAAMa,gBAAgB,GAAGb,gBAAgB,CAACc,WAAjB,CAA6BC,MAA7B,CAAoCpB,MAAM,CAACqB,cAA3C,CAAzB;AACA,aAAO;AAACF,QAAAA,WAAW,EAACD;AAAb,OAAP;AACH,KAHe,CAAhB;AAIH;;AAED,MAAGlB,MAAM,CAACgB,IAAP,KAAgB,MAAnB,EAA0B;AACtB,WAAOf,SAAS,CAACF,KAAK,CAACC,MAAN,CAAaG,MAAd,EAAqBE,gBAAgB,IAAI;AACrD,YAAMiB,OAAO,GAAG,CAACjB,gBAAgB,CAACiB,OAAlC;AACA,YAAMC,KAAK,GAAGvB,MAAM,CAACuB,KAArB;AACA,YAAMC,aAAa,GAAGnB,gBAAgB,CAACoB,MAAjB,CAAwBnB,IAAxB,CAA6BoB,UAAU,IAAIA,UAAU,CAACC,KAAX,KAAqBJ,KAAK,CAACI,KAAtE,CAAtB;AAEA,UAAIC,WAAJ;;AACA,UAAGJ,aAAa,KAAKK,SAArB,EAA+B;AAC3BD,QAAAA,WAAW,GAAGvB,gBAAgB,CAACoB,MAAjB,CAAwBL,MAAxB,CAA+BG,KAA/B,CAAd;AACH,OAFD,MAEO;AACHK,QAAAA,WAAW,GAAGvB,gBAAgB,CAACoB,MAAjB,CAAwBK,MAAxB,CAA+BJ,UAAU,IAAIA,UAAU,CAACC,KAAX,KAAqBJ,KAAK,CAACI,KAAxE,CAAd;AACH;;AACD,aAAO;AAACL,QAAAA,OAAD;AAASG,QAAAA,MAAM,EAACG;AAAhB,OAAP;AACH,KAZe,CAAhB;AAaH;;AAED,SAAO7B,KAAP;AACD","sourcesContent":["import {List} from 'immutable';\n\n\n\nexport function timeline(state=new List(),action){\n\n    function trocaFoto(lista,fotoId,callbackAtualizaPropriedades){\n\n        const fotoEstadoAntigo = lista.find(foto => foto.id === fotoId);\n        const novasPropriedades = callbackAtualizaPropriedades(fotoEstadoAntigo);\n        const fotoEstadoNovo = Object.assign({},fotoEstadoAntigo,novasPropriedades);\n        const indiceDaLista = lista.findIndex(foto => foto.id === action.fotoId);\n        return lista.set(indiceDaLista,fotoEstadoNovo);\n    }\n\n    if(action.type === 'LISTAGEM'){  \n      return new List(action.fotos);\n    }\n  \n    if(action.type === 'COMENTARIO'){\n        return trocaFoto(state, action.fotoId,fotoEstadoAntigo => {\n            const novosComentarios = fotoEstadoAntigo.comentarios.concat(action.novoComentario);\n            return {comentarios:novosComentarios};\n        })\n    }\n  \n    if(action.type === 'LIKE'){\n        return trocaFoto(state.action.fotoId,fotoEstadoAntigo => {\n            const likeada = !fotoEstadoAntigo.likeada;\n            const liker = action.liker;\n            const possivelLiker = fotoEstadoAntigo.likers.find(likerAtual => likerAtual.login === liker.login);\n\n            let novosLikers;\n            if(possivelLiker === undefined){\n                novosLikers = fotoEstadoAntigo.likers.concat(liker);\n            } else {\n                novosLikers = fotoEstadoAntigo.likers.filter(likerAtual => likerAtual.login !== liker.login);\n            }\n            return {likeada,likers:novosLikers};\n        })\n    }\n  \n    return state;\n  }"]},"metadata":{},"sourceType":"module"}